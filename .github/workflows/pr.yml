name: 'Build Pull Request'
run-name: Build for PR ${{ github.event.pull_request.number }}

on:
  pull_request:
    types:
      - synchronize
      - opened
      - ready_for_review
      - reopened

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      tests-to-run: ${{ steps.test.outputs.tests-to-run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1000
          fetch-tags: true

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'microsoft'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Uses a gradle test dry run to collect all test output report files and then determines what to run
      # Test reports generated by a 'test' task are grouped
      # And other test task will have its classes seperated out
      # Generates a JSON array with parameters to pass to gradle
      - name: Determine tests to run#
        id: test
        run: |
          ./gradlew test --test-dry-run 
          find . -wholename "*classes/net.neoforged.*.html" | sed -e 's/\.html/"/g' | sed -e 's/build\/reports\///g' | sed -e 's/\/classes\// --tests "/g' | sed -e 's/^\.//g' | sed 's/\/tests\//:/g' | sed 's/\//:/g' | grep -v -e ':test ' > ./tasks
          find . -wholename "*classes/net.neoforged.*.html" | grep -Po '.*(?=\.)' | sed -e 's/build\/reports\///g' | sed -e 's/\/classes\//-/g' | sed -e 's/^\.//g' | sed 's/\/tests\//:/g' | sed 's/\//:/g' | grep -e ':test-' | sed -e 's/-[a-zA-Z.]*$//g' | sort | uniq >> ./tasks
          TESTS=$(cat tasks | jq --raw-input . | jq --compact-output --slurp .)
          echo "::set-output name=tests-to-run::$TESTS"

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1000
          fetch-tags: true

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'microsoft'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build
        run: ./gradlew --info -s -x assemble

      - name: Publish artifacts
        uses: neoforged/action-pr-publishing/upload@v1

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJSON(needs.setup.outputs.tests-to-run) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1000
          fetch-tags: true

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'microsoft'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew --info -s ${{ matrix.test }}

      # Always upload test results
      - name: Merge Test Reports
        if: success() || failure()
        run: npx junit-report-merger junit.xml "**/TEST-*.xml"

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          if-no-files-found: ignore
          name: test-results-${{ matrix.test }}
          path: junit.xml
          retention-days: 1

  process-test-data:
    runs-on: ubuntu-latest
    needs: test
    if: success() || failure()
    steps:
      - uses: actions/checkout@v3

      - name: Download reports' artifacts
        uses: actions/download-artifact@v3
        with:
          name: test-results-*
          path: downloaded_artifacts

      - name: Merge Test Reports
        if: success() || failure()
        run: npx junit-report-merger junit.xml "**/TEST-*.xml"

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results
          path: junit.xml
